#!/bin/bash

# This script will compile or run another finishing operation on a document.
#
# Compiles LaTeX, R Markdown, Markdown, Java, C, C++ or runs interpreted languages
# Runs scripts based on extention or shebang
#
# Note that .tex files which you wish to compile with XeLaTeX should have the
# string "xelatex" somewhere in a comment/command in the first 5 lines.

run_program=false

while (( $# > 0 )); do case $1 in
   -r|--run) run_program=true;;
   -[^r]*) echo "Invalid argument supplied" && exit;;
   *) file=$(readlink -f "$1") ;
 esac; shift 1
done

if [ -z "$file" ]; then
    echo "Give program to compile" && exit 1
fi

dir=${file%/*}
base="${file%.*}"
ext="${file##*.}"

cd "$dir" || exit

textype() {
    command="pdflatex"
    ( sed 5q "$file" | grep -i -q 'xelatex' ) && command="xelatex"
    $command -shell-escape --output-directory="$dir" "$base" &&
    grep -i addbibresource "$file" >/dev/null &&
    biber --input-directory "$dir" "$base" &&
    $command --output-directory="$dir" "$base" &&
    $command --output-directory="$dir" "$base"
    latexclear
}

latexclear() {
    find "$dir"  -maxdepth 1 -type f -regextype gnu-awk -regex "^$base\\.(4tc|xref|tmp|pyc|pyo|fls|vrb|fdb_latexmk|bak|swp|aux|log|synctex\\(busy\\)|lof|lot|maf|idx|mtc|mtc0|nav|out|snm|toc|bcf|run\\.xml|synctex\\.gz|blg|bbl)" -delete
}

compile() {
    case "$ext" in
        [rR]md) Rscript -e "rmarkdown::render('$file', quiet=TRUE)" ;;
	    tex) textype "$file" ;;
	    md) pandoc "$file" -o "$base".pdf ;;
        java) javac "$file" ;;
	    c) gcc -Wall -Werror "$file" -o "$base" ;;
        cpp|cc) g++ -std=c++17 -O2 -Wall "$file" -o "$base" ;;
        dot) dot -Tpng "$file" -o "$base".png ;;
        rs) rustc "$file" ;;
        go) go build "$file" ;;
        hs) ghc "$file" && find "$dir" -maxdepth 1 -type f -regextype gnu-awk -regex "^$base\\.(o|hi)" -delete ;;
        ts) tsc "$file" ;;
    esac
}

run() {
    case "$ext" in
        java) java "${base##*/}" ;;
	    py) python3 "$file" ;;
        js) node "$file" ;;
        ts) ts-node "$file" ;;
        jl) julia "$file" ;;
        *) "$base" ;;
    esac
}


compile || exit
if ($run_program); then
    run
fi
